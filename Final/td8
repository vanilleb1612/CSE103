#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 16 11:10:27 2020

@author: macbookvanille
"""
"""""""question 1"""""""

def missing_number(arr):
    if len(arr) == 1:
        return arr[0]
    i, j, k = 0, len(arr)-1 , len(arr)//2
    while True:
        before, after = arr[k-1], arr[k+1]
        if before == arr[k]:
            i = k+1
            k = (j-i)//2           
        elif after == arr[k]:
            j = k-1
            k = (j-i) // 2
        else:
            return arr[k]
        
        
print(missing_number([1,1,2,2,3]))

    # your code here

def test_q1():
    # your code here
  

def missing_number(arr):
    i=0
    while i<=len(arr)-2:
        if arr[i]==arr[i+1]:
            print("arr[i]1",arr[i])
            i=i+2
        if arr[i] != arr[i+1]:
            print("arr[i]2",arr[i])
            return arr[i]
    else:
        return arr[i]
        
print(missing_number([1,1,2,2,3]))  
  
    
   ''' 
def selection(arr):
"""Input: list arr of numbers
Output: arr sorted in ascending order
"""
n = len(arr)
for i in range(0,n-1):
# Maintain arr[0..i] sorted
minptr = i
for j in range(i+1,n):
# Find position of smallest element in arr[i..n-1]
if arr[j] < arr[minptr]:
minptr = j
arr[i],arr[minptr] =arr[minptr],arr[i] # Swap values


def selection(arr,i,j,k):
    for x in range(i,k-1):
# Maintain arr[0..i] sorted
        minptr = x
        for j in range(x+1,k):
# Find position of smallest element in arr[i..n-1]
            if arrf[j] < arrf[minptr]:
                minptr = j
            arrf[x],arrf[minptr] =arrf[minptr],arrf[x] # Swap values
    return arrf
def sort(arr,i,j,k):
    y=1
    if arr[i]<arr[j]:
        i+=1
    else:
        if arr[i]<arr[j+y]:
             arr[i],arr[j]=arr[j],arr[i]
        else:
            y+=1
    return arr

print(sort([0,6,7,1,3],0,3,5))
'''

def finish_sorting(arr, i, j,k):
    while i < j and j < k:
        if arr[i] < arr[j]:
            i+= 1
        else:   
            last = arr[j]
            prev = arr[i]
            for x in range(i, j):
                tmp = arr[x+1]
                arr[x+1] = prev
                prev  = tmp
            arr[i + 1] = last
            arr[i], arr[i+1] = arr[i+1],arr[i]
            j += 1
            i += 2
    return arr

def test_q2():
    a1,i1, j1, k1 = [0, 2, 4, 6, 1, 3 ,5, 7], 0, 4, 8
    assert(finish_sorting(a1, i1, j1, k1) == [0, 1, 2, 3, 4, 5, 6, 7])
    a2, i2, j2, k2 = [2,1], 0, 1, 2
    assert(finish_sorting(a2, i2, j2, k2) == [1, 2])

''''

def short_paths(G, n, s):
    dists = [inf for _ in range(n)]
    dists[0] = 0
    for edge in G:
        if edge[0] == s:
            tmp = edge[2] + shorth_paths(G, n, edge[1])
            if tmp < dists[edge[1]]:
                dists[edge[1]] = tmp
                '''
    



